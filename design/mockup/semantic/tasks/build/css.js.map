{"version":3,"sources":["../../../../../../../content/design/mockup/semantic/tasks/build/css.js"],"names":[],"mappings":";;;;AAIA;EACE,aAAa,EAAE,OAAO,CAAC,MAAM,CAAC;;;EAG9B,aAAa,EAAE,OAAO,CAAC,gBAAgB,CAAC;EACxC,aAAa,EAAE,OAAO,CAAC,IAAI,CAAC;;;EAG5B,aAAa,EAAE,OAAO,CAAC,mBAAmB,CAAC;EAC3C,aAAa,EAAE,OAAO,CAAC,YAAY,CAAC;EACpC,aAAa,EAAE,OAAO,CAAC,YAAY,CAAC;EACpC,aAAa,EAAE,OAAO,CAAC,cAAc,CAAC;EACtC,aAAa,EAAE,OAAO,CAAC,SAAS,CAAC;EACjC,aAAa,EAAE,OAAO,CAAC,WAAW,CAAC;EACnC,aAAa,EAAE,OAAO,CAAC,iBAAiB,CAAC;EACzC,aAAa,EAAE,OAAO,CAAC,cAAc,CAAC;EACtC,aAAa,EAAE,OAAO,CAAC,YAAY,CAAC;EACpC,aAAa,EAAE,OAAO,CAAC,aAAa,CAAC;EACrC,aAAa,EAAE,OAAO,CAAC,cAAc,CAAC;EACtC,aAAa,EAAE,OAAO,CAAC,cAAc,CAAC;;;EAGtC,aAAa,EAAE,OAAO,CAAC,gBAAgB,CAAC;EACxC,aAAa,EAAE,OAAO,CAAC,iBAAiB,CAAC;EACzC,aAAa,EAAE,OAAO,CAAC,2BAA2B,CAAC;;;EAGnD,aAAa,EAAE,MAAM,CAAC,KAAK;EAC3B,aAAa,EAAE,MAAM,CAAC,KAAK,CAAC,MAAM;EAClC,aAAa,EAAE,MAAM,CAAC,KAAK,CAAC,MAAM;EAClC,aAAa,EAAE,MAAM,CAAC,KAAK,CAAC,MAAM;;EAElC,aAAa,EAAE,KAAK,CAAC,MAAM;EAC3B,aAAa,EAAE,KAAK,CAAC,MAAM,CAAC,QAAQ;EACpC,aAAa,EAAE,KAAK,CAAC,GAAG;EACxB,aAAa,EAAE,KAAK,CAAC;AACvB;;;AAGA,OAAO,CAAC,yBAAyB,CAAC,CAAC,IAAI,CAAC;;AAExC,MAAM,CAAC,QAAQ,EAAE,QAAQ,CAAC,QAAQ,EAAE;;EAElC;IACE,eAAe,EAAE,CAAC;IAClB,eAAe,EAAE,QAAQ,CAAC,EAAE;MAC1B,cAAc,EAAE;MAChB,EAAE,CAAC,eAAe,IAAI,CAAC,EAAE;QACvB,QAAQ,CAAC,CAAC;MACZ;IACF,CAAC;;IAED,MAAM;IACN,gBAAgB;IAChB;EACF;;EAEA,OAAO,CAAC,IAAI,CAAC,cAAc,CAAC;;EAE5B,EAAE,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE,EAAE;IACvB,OAAO,CAAC,KAAK,CAAC,2DAA2D,CAAC;IAC1E,MAAM;EACR;;;EAGA,OAAO,EAAE,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,YAAY,EAAE,OAAO,EAAE,KAAK,CAAC,WAAW,EAAE,OAAO;IACxE,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC;IACpC,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC;IACzB,CAAC,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,MAAM,CAAC;IACnC,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,SAAS,CAAC,EAAE,EAAE,QAAQ,CAAC,SAAS,CAAC,GAAG,CAAC;IAC5D,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE,EAAE,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC;IACxD,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE,EAAE,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC;IACpD,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE,EAAE,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC;IACpD,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,EAAE,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC;IAClD,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;EACjB;;;EAGA,mBAAmB,EAAE,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;EACzC,mBAAmB,EAAE,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;;;EAGzC;IACE,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IACf,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,YAAY,CAAC;IACjD,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,aAAa,EAAE,KAAK,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;IAC5D,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC;IACpC,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,OAAO,CAAC;IACxB,CAAC,EAAE,CAAC,KAAK,EAAE,QAAQ,CAAC,EAAE;MACpB,WAAW,CAAC,0BAA0B,EAAE,aAAa,CAAC;IACxD,CAAC;EACH;;;EAGA,iBAAiB,EAAE;IACjB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IACf,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IACb,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,UAAU,CAAC;IAC/C,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,MAAM,CAAC;IAChC,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC;IACpC,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,aAAa,EAAE,KAAK,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;IAC5D,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC;IAClC,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,OAAO,CAAC;IACxB,CAAC,EAAE,CAAC,KAAK,EAAE,QAAQ,CAAC,EAAE;MACpB,WAAW,CAAC,wBAAwB,EAAE,aAAa,CAAC;IACtD,CAAC;EACH;;AAEF,CAAC","file":"css.js","sourcesContent":["/*******************************\n          Build Task\n*******************************/\n\nvar\n  gulp         = require('gulp'),\n\n  // node dependencies\n  console      = require('better-console'),\n  fs           = require('fs'),\n\n  // gulp dependencies\n  autoprefixer = require('gulp-autoprefixer'),\n  chmod        = require('gulp-chmod'),\n  clone        = require('gulp-clone'),\n  flatten      = require('gulp-flatten'),\n  gulpif       = require('gulp-if'),\n  less         = require('gulp-less'),\n  minifyCSS    = require('gulp-minify-css'),\n  plumber      = require('gulp-plumber'),\n  print        = require('gulp-print'),\n  rename       = require('gulp-rename'),\n  replace      = require('gulp-replace'),\n  runSequence  = require('run-sequence'),\n\n  // config\n  config       = require('../config/user'),\n  tasks        = require('../config/tasks'),\n  install      = require('../config/project/install'),\n\n  // shorthand\n  globs        = config.globs,\n  assets       = config.paths.assets,\n  output       = config.paths.output,\n  source       = config.paths.source,\n\n  banner       = tasks.banner,\n  comments     = tasks.regExp.comments,\n  log          = tasks.log,\n  settings     = tasks.settings\n;\n\n// add internal tasks (concat release)\nrequire('../collections/internal')(gulp);\n\nmodule.exports = function(callback) {\n\n  var\n    tasksCompleted = 0,\n    maybeCallback  = function() {\n      tasksCompleted++;\n      if(tasksCompleted === 2) {\n        callback();\n      }\n    },\n\n    stream,\n    compressedStream,\n    uncompressedStream\n  ;\n\n  console.info('Building CSS');\n\n  if( !install.isSetup() ) {\n    console.error('Cannot build files. Run \"gulp install\" to set-up Semantic');\n    return;\n  }\n\n  // unified css stream\n  stream = gulp.src(source.definitions + '/**/' + globs.components + '.less')\n    .pipe(plumber(settings.plumber.less))\n    .pipe(less(settings.less))\n    .pipe(autoprefixer(settings.prefix))\n    .pipe(replace(comments.variables.in, comments.variables.out))\n    .pipe(replace(comments.license.in, comments.license.out))\n    .pipe(replace(comments.large.in, comments.large.out))\n    .pipe(replace(comments.small.in, comments.small.out))\n    .pipe(replace(comments.tiny.in, comments.tiny.out))\n    .pipe(flatten())\n  ;\n\n  // two concurrent streams from same source to concat release\n  uncompressedStream = stream.pipe(clone());\n  compressedStream   = stream.pipe(clone());\n\n  // uncompressed component css\n  uncompressedStream\n    .pipe(plumber())\n    .pipe(replace(assets.source, assets.uncompressed))\n    .pipe(gulpif(config.hasPermission, chmod(config.permission)))\n    .pipe(gulp.dest(output.uncompressed))\n    .pipe(print(log.created))\n    .on('end', function() {\n      runSequence('package uncompressed css', maybeCallback);\n    })\n  ;\n\n  // compressed component css\n  compressedStream = stream\n    .pipe(plumber())\n    .pipe(clone())\n    .pipe(replace(assets.source, assets.compressed))\n    .pipe(minifyCSS(settings.minify))\n    .pipe(rename(settings.rename.minCSS))\n    .pipe(gulpif(config.hasPermission, chmod(config.permission)))\n    .pipe(gulp.dest(output.compressed))\n    .pipe(print(log.created))\n    .on('end', function() {\n      runSequence('package compressed css', maybeCallback);\n    })\n  ;\n\n};\n"]}