{"version":3,"sources":["../../../../../../../content/design/mockup/semantic/tasks/docs/metadata.js"],"names":[],"mappings":"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","file":"metadata.js","sourcesContent":["\n/*******************************\n           Summarize Docs\n*******************************/\n\nvar\n  // node dependencies\n  console      = require('better-console'),\n  fs           = require('fs'),\n  YAML         = require('yamljs')\n;\n\nvar data = {};\n\n/**\n * Test for prefix in string.\n * @param {string} str\n * @param {string} prefix\n * @return {boolean}\n */\nfunction startsWith(str, prefix) {\n  return str.indexOf(prefix) === 0;\n};\n\nfunction inArray(needle, haystack) {\n  var length = haystack.length;\n  for(var i = 0; i < length; i++) {\n      if(haystack[i] == needle) return true;\n  }\n  return false;\n}\n\n/**\n * Parses a file for metadata and stores result in data object.\n * @param {File} file - object provided by map-stream.\n * @param {function(?,File)} - callback provided by map-stream to\n * reply when done.\n */\nfunction parser(file, callback) {\n  // file exit conditions\n  if(file.isNull()) {\n    return callback(null, file); // pass along\n  }\n\n  if(file.isStream()) {\n    return callback(new Error('Streaming not supported'));\n  }\n\n  try {\n\n    var\n      /** @type {string} */\n      text     = String(file.contents.toString('utf8')),\n      lines    = text.split('\\n'),\n      filename = file.path.substring(0, file.path.length - 4),\n      key      = 'server/documents',\n      position = filename.indexOf(key)\n    ;\n\n    // exit conditions\n    if(!lines) {\n      return;\n    }\n    if(position < 0) {\n      return callback(null, file);\n    }\n\n    filename = filename.substring(position + key.length + 1, filename.length);\n\n    var\n      lineCount = lines.length,\n      active    = false,\n      yaml      = [],\n      categories = [\n        'UI Element',\n        'UI Global',\n        'UI Collection',\n        'UI View',\n        'UI Module',\n        'UI Behavior'\n      ],\n      index,\n      meta,\n      line\n    ;\n\n    for(index = 0; index < lineCount; index++) {\n\n      line = lines[index];\n\n      // Wait for metadata block to begin\n      if(!active) {\n        if(startsWith(line, '---')) {\n          active = true;\n        }\n        continue;\n      }\n      // End of metadata block, stop parsing.\n      if(startsWith(line, '---')) {\n        break;\n      }\n      yaml.push(line);\n    }\n\n\n    // Parse yaml.\n    meta = YAML.parse(yaml.join('\\n'));\n    if(meta && meta.type && meta.title && inArray(meta.type, categories) ) {\n      meta.category = meta.type;\n      meta.filename = filename;\n      meta.url      = '/' + filename;\n      meta.title    = meta.title;\n      // Primary key will by filepath\n      data[meta.element] = meta;\n    }\n    else {\n      // skip\n      // console.log(meta);\n    }\n\n\n  }\n\n  catch(error) {\n    console.log(error, filename);\n  }\n\n  callback(null, file);\n\n}\n\n/**\n * Export function expected by map-stream.\n */\nmodule.exports = {\n  result : data,\n  parser : parser\n};\n"]}