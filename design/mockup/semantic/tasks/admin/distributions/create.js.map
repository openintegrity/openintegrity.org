{"version":3,"sources":["../../../../../../../../content/design/mockup/semantic/tasks/admin/distributions/create.js"],"names":[],"mappings":"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","file":"create.js","sourcesContent":["/*******************************\n     Create Distributions\n*******************************/\n\n/*\n This will create individual distribution repositories for each SUI distribution\n\n  * copy distribution files to release\n  * update package.json file\n*/\n\nvar\n  gulp            = require('gulp'),\n\n  // node dependencies\n  console         = require('better-console'),\n  del             = require('del'),\n  fs              = require('fs'),\n  path            = require('path'),\n  runSequence     = require('run-sequence'),\n  mergeStream     = require('merge-stream'),\n\n  // admin dependencies\n  concatFileNames = require('gulp-concat-filenames'),\n  debug           = require('gulp-debug'),\n  flatten         = require('gulp-flatten'),\n  git             = require('gulp-git'),\n  jsonEditor      = require('gulp-json-editor'),\n  plumber         = require('gulp-plumber'),\n  rename          = require('gulp-rename'),\n  replace         = require('gulp-replace'),\n  tap             = require('gulp-tap'),\n\n  // config\n  config          = require('../../config/user'),\n  release         = require('../../config/admin/release'),\n  project         = require('../../config/project/release'),\n\n  // shorthand\n  version         = project.version,\n  output          = config.paths.output\n\n;\n\n\nmodule.exports = function(callback) {\n  var\n    stream,\n    index,\n    tasks = []\n  ;\n\n  for(index in release.distributions) {\n\n    var\n      distribution = release.distributions[index]\n    ;\n\n    // streams... designed to save time and make coding fun...\n    (function(distribution) {\n\n      var\n        distLowerCase   = distribution.toLowerCase(),\n        outputDirectory = path.join(release.outputRoot, distLowerCase),\n        packageFile     = path.join(outputDirectory, release.files.npm),\n        repoName        = release.distRepoRoot + distribution,\n        regExp          = {\n          match : {\n            files   : '{files}',\n            version : '{version}'\n          }\n        },\n        task = {\n          all     : distribution + ' copying files',\n          repo    : distribution + ' create repo',\n          meteor  : distribution + ' create meteor package.js',\n          package : distribution + ' create package.json'\n        },\n        gatherFiles,\n        createList\n      ;\n\n      // get files for meteor\n      gatherFiles = function(dir) {\n        var\n          dir   = dir || path.resolve('.'),\n          list  = fs.readdirSync(dir),\n          omitted = [\n            '.git',\n            'node_modules',\n            'package.js',\n            'LICENSE',\n            'README.md',\n            'package.json',\n            'bower.json',\n            '.gitignore'\n          ],\n          files = []\n        ;\n        list.forEach(function(file) {\n          var\n            isOmitted = (omitted.indexOf(file) > -1),\n            filePath  = path.join(dir, file),\n            stat      = fs.statSync(filePath)\n          ;\n          if(!isOmitted) {\n            if(stat && stat.isDirectory()) {\n              files = files.concat(gatherFiles(filePath));\n            }\n            else {\n              files.push(filePath.replace(outputDirectory + path.sep, ''));\n            }\n          }\n        });\n        return files;\n      };\n\n      // spaces out list correctly\n      createList = function(files) {\n        var filenames = '';\n        for(var file in files) {\n          if(file == (files.length - 1) ) {\n            filenames += \"'\" + files[file] + \"'\";\n          }\n          else {\n            filenames += \"'\" + files[file] + \"',\\n    \";\n          }\n        }\n        return filenames;\n      };\n\n\n      gulp.task(task.meteor, function() {\n        var\n          files     = gatherFiles(outputDirectory),\n          filenames = createList(files)\n        ;\n        gulp.src(release.templates.meteor[distLowerCase])\n          .pipe(plumber())\n          .pipe(flatten())\n          .pipe(replace(regExp.match.version, version))\n          .pipe(replace(regExp.match.files, filenames))\n          .pipe(rename(release.files.meteor))\n          .pipe(gulp.dest(outputDirectory))\n        ;\n      });\n\n      if(distribution == 'CSS') {\n        gulp.task(task.repo, function() {\n          var\n            themes,\n            components,\n            releases\n          ;\n          themes = gulp.src('dist/themes/default/**/*', { base: 'dist/' })\n            .pipe(gulp.dest(outputDirectory))\n          ;\n          components = gulp.src('dist/components/*', { base: 'dist/' })\n            .pipe(gulp.dest(outputDirectory))\n          ;\n          releases = gulp.src('dist/*', { base: 'dist/' })\n            .pipe(gulp.dest(outputDirectory))\n          ;\n          return mergeStream(themes, components, releases);\n        });\n      }\n      else if(distribution == 'LESS') {\n        gulp.task(task.repo, function() {\n          var\n            definitions,\n            themeImport,\n            themeConfig,\n            siteTheme,\n            themes\n          ;\n          definitions = gulp.src('src/definitions/**/*', { base: 'src/' })\n            .pipe(gulp.dest(outputDirectory))\n          ;\n          themeImport = gulp.src('src/semantic.less', { base: 'src/' })\n            .pipe(gulp.dest(outputDirectory))\n          ;\n          themeImport = gulp.src('src/theme.less', { base: 'src/' })\n            .pipe(gulp.dest(outputDirectory))\n          ;\n          themeConfig = gulp.src('src/theme.config.example', { base: 'src/' })\n            .pipe(gulp.dest(outputDirectory))\n          ;\n          siteTheme = gulp.src('src/_site/**/*', { base: 'src/' })\n            .pipe(gulp.dest(outputDirectory))\n          ;\n          themes = gulp.src('src/themes/**/*', { base: 'src/' })\n            .pipe(gulp.dest(outputDirectory))\n          ;\n          return mergeStream(definitions, themeImport, themeConfig, siteTheme, themes);\n        });\n      }\n\n      // extend package.json\n      gulp.task(task.package, function() {\n        return gulp.src(packageFile)\n          .pipe(plumber())\n          .pipe(jsonEditor(function(package) {\n            if(version) {\n              package.version = version;\n            }\n            return package;\n          }))\n          .pipe(gulp.dest(outputDirectory))\n        ;\n      });\n\n      tasks.push(task.meteor);\n      tasks.push(task.repo);\n      tasks.push(task.package);\n\n    })(distribution);\n  }\n  runSequence(tasks, callback);\n};"]}