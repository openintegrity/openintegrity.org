{"version":3,"sources":["../../../../../../../../content/design/mockup/semantic/tasks/admin/distributions/init.js"],"names":[],"mappings":"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","file":"init.js","sourcesContent":["/*******************************\n        Init Dist Repos\n*******************************/\n\n/*\n\n This task pulls the latest version of distribution from GitHub\n\n  * Creates new repo if doesnt exist (locally & GitHub)\n  * Adds remote it doesnt exists\n  * Pulls latest changes from repo\n\n*/\n\nvar\n  gulp      = require('gulp'),\n\n  // node dependencies\n  console   = require('better-console'),\n  del       = require('del'),\n  fs        = require('fs'),\n  path      = require('path'),\n  git       = require('gulp-git'),\n  githubAPI = require('github'),\n  mkdirp    = require('mkdirp'),\n\n  // admin files\n  github    = require('../../config/admin/github.js'),\n  release   = require('../../config/admin/release'),\n  project   = require('../../config/project/release'),\n\n\n  // oAuth configuration for GitHub\n  oAuth     = fs.existsSync(__dirname + '/../../config/admin/oauth.js')\n    ? require('../../config/admin/oauth')\n    : false,\n\n  // shorthand\n  version = project.version\n;\n\nmodule.exports = function(callback) {\n\n  var\n    index = -1,\n    total = release.distributions.length,\n    timer,\n    stream,\n    stepRepo\n  ;\n\n  if(!oAuth) {\n    console.error('Must add oauth token for GitHub in tasks/config/admin/oauth.js');\n    return;\n  }\n\n  // Do Git commands synchronously per component, to avoid issues\n  stepRepo = function() {\n\n    index = index + 1;\n\n    if(index >= total) {\n      callback();\n      return;\n    }\n\n    var\n      component          = release.distributions[index],\n      lowerCaseComponent = component.toLowerCase(),\n      outputDirectory    = path.resolve(release.outputRoot + lowerCaseComponent),\n      repoName           = release.distRepoRoot + component,\n\n      gitOptions         = { cwd: outputDirectory },\n      pullOptions        = { args: '-q', cwd: outputDirectory, quiet: true },\n      resetOptions       = { args: '-q --hard', cwd: outputDirectory, quiet: true },\n      gitURL             = 'git@github.com:' + release.org + '/' + repoName + '.git',\n      repoURL            = 'https://github.com/' + release.org + '/' + repoName + '/',\n      localRepoSetup     = fs.existsSync(path.join(outputDirectory, '.git'))\n    ;\n\n    console.log('Processing repository: ' + outputDirectory);\n\n    // create folder if doesn't exist\n    if( !fs.existsSync(outputDirectory) ) {\n      mkdirp.sync(outputDirectory);\n    }\n\n    // clean folder\n    if(release.outputRoot.search('../repos') == 0) {\n      console.info('Cleaning dir', outputDirectory);\n      del.sync([outputDirectory + '**/*'], {silent: true, force: true});\n    }\n\n    // set-up local repo\n    function setupRepo() {\n      if(localRepoSetup) {\n        addRemote();\n      }\n      else {\n        initRepo();\n      }\n    }\n\n    function initRepo() {\n      console.info('Initializing repository for ' + component);\n      git.init(gitOptions, function(error) {\n        if(error) {\n          console.error('Error initializing repo', error);\n        }\n        addRemote();\n      });\n    }\n\n    function createRepo() {\n      console.info('Creating GitHub repo ' + repoURL);\n      github.repos.createFromOrg({\n        org      : release.org,\n        name     : repoName,\n        homepage : release.homepage\n      }, function() {\n        setupRepo();\n      });\n    }\n\n    function addRemote() {\n      console.info('Adding remote origin as ' + gitURL);\n      git.addRemote('origin', gitURL, gitOptions, function(){\n        pullFiles();\n      });\n    }\n\n    function pullFiles() {\n      console.info('Pulling ' + component + ' files');\n      git.pull('origin', 'master', pullOptions, function(error) {\n        resetFiles();\n      });\n    }\n\n    function resetFiles() {\n      console.info('Resetting files to head');\n      git.reset('HEAD', resetOptions, function(error) {\n        nextRepo();\n      });\n    }\n\n    function nextRepo() {\n      //console.log('Sleeping for 1 second...');\n      // avoid rate throttling\n      global.clearTimeout(timer);\n      timer = global.setTimeout(function() {\n        stepRepo()\n      }, 0);\n    }\n\n\n    if(localRepoSetup) {\n      pullFiles();\n    }\n    else {\n      setupRepo();\n      // createRepo() only use to create remote repo (easier to do manually)\n    }\n\n  };\n\n  stepRepo();\n\n\n};\n"]}