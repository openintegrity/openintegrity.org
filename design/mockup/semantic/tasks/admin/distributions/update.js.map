{"version":3,"sources":["../../../../../../../../content/design/mockup/semantic/tasks/admin/distributions/update.js"],"names":[],"mappings":"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","file":"update.js","sourcesContent":["/*******************************\n          Update Repos\n*******************************/\n\n/*\n\n This task update all SUI individual distribution repos with new versions of distributions\n\n  * Commits changes from create repo\n  * Pushes changes to GitHub\n  * Tag new releases if version changed in main repo\n\n*/\n\nvar\n  gulp           = require('gulp'),\n\n  // node dependencies\n  console        = require('better-console'),\n  fs             = require('fs'),\n  path           = require('path'),\n  git            = require('gulp-git'),\n  githubAPI      = require('github'),\n  requireDotFile = require('require-dot-file'),\n\n  // admin files\n  github         = require('../../config/admin/github.js'),\n  release        = require('../../config/admin/release'),\n  project        = require('../../config/project/release'),\n\n\n  // oAuth configuration for GitHub\n  oAuth          = fs.existsSync(__dirname + '/../../config/admin/oauth.js')\n    ? require('../../config/admin/oauth')\n    : false,\n\n  // shorthand\n  version = project.version\n;\n\nmodule.exports = function(callback) {\n\n  var\n    index = -1,\n    total = release.distributions.length,\n    timer,\n    stream,\n    stepRepo\n  ;\n\n  if(!oAuth) {\n    console.error('Must add oauth token for GitHub in tasks/config/admin/oauth.js');\n    return;\n  }\n\n  // Do Git commands synchronously per distribution, to avoid issues\n  stepRepo = function() {\n\n    index = index + 1;\n    if(index >= total) {\n      callback();\n      return;\n    }\n\n    var\n      distribution         = release.distributions[index],\n      outputDirectory      = path.resolve(path.join(release.outputRoot, distribution.toLowerCase() )),\n      repoName             = release.distRepoRoot + distribution,\n\n      commitArgs = (oAuth.name !== undefined && oAuth.email !== undefined)\n        ? '--author \"' + oAuth.name + ' <' + oAuth.email + '>\"'\n        : '',\n\n      distributionPackage = fs.existsSync(outputDirectory + 'package.json' )\n        ? require(outputDirectory + 'package.json')\n        : false,\n\n      isNewVersion  = (version && distributionPackage.version != version),\n\n      commitMessage = (isNewVersion)\n        ? 'Updated distribution to version ' + version\n        : 'Updated files from main repo',\n\n      gitOptions      = { cwd: outputDirectory },\n      commitOptions   = { args: commitArgs, cwd: outputDirectory },\n      releaseOptions  = { tag_name: version, owner: release.org, repo: repoName },\n\n      fileModeOptions = { args : 'config core.fileMode false', cwd: outputDirectory },\n      usernameOptions = { args : 'config user.name \"' + oAuth.name + '\"', cwd: outputDirectory },\n      emailOptions    = { args : 'config user.email \"' + oAuth.email + '\"', cwd: outputDirectory },\n      versionOptions =  { args : 'rev-parse --verify HEAD', cwd: outputDirectory },\n\n      localRepoSetup  = fs.existsSync(path.join(outputDirectory, '.git')),\n      canProceed      = true\n    ;\n\n\n    console.info('Processing repository:' + outputDirectory);\n\n    function setConfig() {\n      git.exec(fileModeOptions, function() {\n        git.exec(usernameOptions, function () {\n          git.exec(emailOptions, function () {\n            commitFiles();\n          });\n        });\n      });\n    }\n\n    // standard path\n    function commitFiles() {\n      // commit files\n      console.info('Committing ' + distribution + ' files', commitArgs);\n      gulp.src('./', gitOptions)\n        .pipe(git.add(gitOptions))\n        .pipe(git.commit(commitMessage, commitOptions))\n        .on('error', function(error) {\n          // canProceed = false; bug in git commit <https://github.com/stevelacy/gulp-git/issues/49>\n        })\n        .on('finish', function(callback) {\n          if(canProceed) {\n            pushFiles();\n          }\n          else {\n            console.info('Nothing new to commit');\n            nextRepo();\n          }\n        })\n      ;\n    }\n\n    // push changes to remote\n    function pushFiles() {\n      console.info('Pushing files for ' + distribution);\n      git.push('origin', 'master', { args: '', cwd: outputDirectory }, function(error) {\n        console.info('Push completed successfully');\n        getSHA();\n      });\n    }\n\n    // gets SHA of last commit\n    function getSHA() {\n      git.exec(versionOptions, function(error, version) {\n        version = version.trim();\n        createRelease(version);\n      });\n    }\n\n    // create release on GitHub.com\n    function createRelease(version) {\n      if(version) {\n        releaseOptions.target_commitish = version;\n      }\n      github.releases.createRelease(releaseOptions, function() {\n        nextRepo();\n      });\n    }\n\n    // Steps to next repository\n    function nextRepo() {\n      console.log('Sleeping for 1 second...');\n      // avoid rate throttling\n      global.clearTimeout(timer);\n      timer = global.setTimeout(stepRepo, 500);\n    }\n\n\n    if(localRepoSetup) {\n      setConfig();\n    }\n    else {\n      console.error('Repository must be setup before running update distributions');\n    }\n\n  };\n\n  stepRepo();\n\n};\n"]}