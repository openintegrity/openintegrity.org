{"version":3,"sources":["../../../../../../content/design/mockup/semantic/tasks/install.js"],"names":[],"mappings":"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","file":"install.js","sourcesContent":["/*******************************\n         Install Task\n*******************************/\n\n/*\n   Install tasks\n\n   For more notes\n\n   * Runs automatically after npm update (hooks)\n   * (NPM) Install - Will ask for where to put semantic (outside pm folder)\n   * (NPM) Upgrade - Will look for semantic install, copy over files and update if new version\n   * Standard installer runs asking for paths to site files etc\n\n*/\n\nvar\n  gulp           = require('gulp'),\n\n  // node dependencies\n  console        = require('better-console'),\n  extend         = require('extend'),\n  fs             = require('fs'),\n  mkdirp         = require('mkdirp'),\n  path           = require('path'),\n  runSequence    = require('run-sequence'),\n\n  // gulp dependencies\n  chmod          = require('gulp-chmod'),\n  del            = require('del'),\n  jsonEditor     = require('gulp-json-editor'),\n  plumber        = require('gulp-plumber'),\n  prompt         = require('gulp-prompt'),\n  rename         = require('gulp-rename'),\n  replace        = require('gulp-replace'),\n  requireDotFile = require('require-dot-file'),\n  wrench         = require('wrench'),\n\n  // install config\n  install        = require('./config/project/install'),\n\n  // user config\n  config         = require('./config/user'),\n\n  // release config (name/title/etc)\n  release        = require('./config/project/release'),\n\n  // shorthand\n  questions      = install.questions,\n  files          = install.files,\n  folders        = install.folders,\n  regExp         = install.regExp,\n  settings       = install.settings,\n  source         = install.source\n;\n\n// Export install task\nmodule.exports = function (callback) {\n\nvar\n  currentConfig = requireDotFile('semantic.json'),\n  manager       = install.getPackageManager(),\n  rootQuestions = questions.root,\n  installFolder = false,\n  answers\n;\n\nconsole.clear();\n\n/* Test NPM install\nmanager = {\n  name : 'NPM',\n  root : path.normalize(__dirname + '/../')\n};\n*/\n\n\n/* Don't do end user config if SUI is a sub-module */\nif( install.isSubModule() ) {\n  console.info('SUI is a sub-module, skipping end-user install');\n  return;\n}\n\n/*-----------------\n    Update SUI\n-----------------*/\n\n// run update scripts if semantic.json exists\nif(currentConfig && manager.name === 'NPM') {\n\n  var\n    updateFolder = path.join(manager.root, currentConfig.base),\n    updatePaths  = {\n      config       : path.join(manager.root, files.config),\n      tasks        : path.join(updateFolder, folders.tasks),\n      themeImport  : path.join(updateFolder, folders.themeImport),\n      definition   : path.join(currentConfig.paths.source.definitions),\n      site         : path.join(currentConfig.paths.source.site),\n      theme        : path.join(currentConfig.paths.source.themes),\n      defaultTheme : path.join(currentConfig.paths.source.themes, folders.defaultTheme)\n    }\n  ;\n\n  // duck-type if there is a project installed\n  if( fs.existsSync(updatePaths.definition) ) {\n\n    // perform update if new version\n    if(currentConfig.version !== release.version) {\n      console.log('Updating Semantic UI from ' + currentConfig.version + ' to ' + release.version);\n\n      console.info('Updating ui definitions...');\n      wrench.copyDirSyncRecursive(source.definitions, updatePaths.definition, settings.wrench.overwrite);\n\n      console.info('Updating default theme...');\n      wrench.copyDirSyncRecursive(source.themes, updatePaths.theme, settings.wrench.merge);\n      wrench.copyDirSyncRecursive(source.defaultTheme, updatePaths.defaultTheme, settings.wrench.overwrite);\n\n      console.info('Updating tasks...');\n      wrench.copyDirSyncRecursive(source.tasks, updatePaths.tasks, settings.wrench.overwrite);\n\n      console.info('Updating gulpfile.js');\n      gulp.src(source.userGulpFile)\n        .pipe(plumber())\n        .pipe(gulp.dest(updateFolder))\n      ;\n\n      // copy theme import\n      console.info('Updating theme import file');\n      gulp.src(source.themeImport)\n        .pipe(plumber())\n        .pipe(gulp.dest(updatePaths.themeImport))\n      ;\n\n      console.info('Adding new site theme files...');\n      wrench.copyDirSyncRecursive(source.site, updatePaths.site, settings.wrench.merge);\n\n      console.info('Updating version...');\n\n      // update version number in semantic.json\n      gulp.src(updatePaths.config)\n        .pipe(plumber())\n        .pipe(rename(settings.rename.json)) // preserve file extension\n        .pipe(jsonEditor({\n          version: release.version\n        }))\n        .pipe(gulp.dest(manager.root))\n      ;\n\n      console.info('Update complete! Run \"\\x1b[92mgulp build\\x1b[0m\" to rebuild dist/ files.');\n\n      return;\n    }\n    else {\n      console.log('Current version of Semantic UI already installed');\n      return;\n    }\n\n  }\n  else {\n    console.error('Cannot locate files to update at path: ', updatePaths.definition);\n    console.log('Running installer');\n  }\n\n}\n\n/*--------------\n Determine Root\n---------------*/\n\n// PM that supports Build Tools (NPM Only Now)\nif(manager.name == 'NPM') {\n  rootQuestions[0].message = rootQuestions[0].message\n    .replace('{packageMessage}', 'We detected you are using \\x1b[92m' + manager.name + '\\x1b[0m. Nice! ')\n    .replace('{root}', manager.root)\n  ;\n  // set default path to detected PM root\n  rootQuestions[0].default = manager.root;\n  rootQuestions[1].default = manager.root;\n\n  // insert PM questions after \"Install Type\" question\n  Array.prototype.splice.apply(questions.setup, [2, 0].concat(rootQuestions));\n\n  // omit cleanup questions for managed install\n  questions.cleanup = [];\n}\n\n\n/*--------------\n   Create SUI\n---------------*/\n\ngulp.task('run setup', function() {\n\n  return gulp\n    .src('gulpfile.js')\n    .pipe(prompt.prompt(questions.setup, function(setupAnswers) {\n      // hoist\n      answers = setupAnswers;\n    }))\n  ;\n\n});\n\ngulp.task('create install files', function(callback) {\n\n  /*--------------\n   Exit Conditions\n  ---------------*/\n\n  // if config exists and user specifies not to proceed\n  if(answers.overwrite !== undefined && answers.overwrite == 'no') {\n    return;\n  }\n\n  console.clear();\n  console.log('Installing');\n  console.log('------------------------------');\n\n\n  /*--------------\n        Paths\n  ---------------*/\n\n  var\n    installPaths = {\n      config            : files.config,\n      configFolder      : folders.config,\n      site              : answers.site || folders.site,\n      themeConfig       : files.themeConfig,\n      themeConfigFolder : folders.themeConfig\n    }\n  ;\n\n  /*--------------\n    NPM Install\n  ---------------*/\n\n  // Check if PM install\n  if(answers.useRoot || answers.customRoot) {\n\n    // Set root to custom root path if set\n    if(answers.customRoot) {\n      if(answers.customRoot === '') {\n        console.log('Unable to proceed, invalid project root');\n        return;\n      }\n      manager.root = answers.customRoot;\n    }\n\n    // special install paths only for PM install\n    installPaths = extend(false, {}, installPaths, {\n      definition   : folders.definitions,\n      lessImport   : folders.lessImport,\n      tasks        : folders.tasks,\n      theme        : folders.themes,\n      defaultTheme : path.join(folders.themes, folders.defaultTheme),\n      themeImport  : folders.themeImport\n    });\n\n    // add project root to semantic root\n    installFolder = path.join(manager.root, answers.semanticRoot);\n\n    // add install folder to all output paths\n    for(var destination in installPaths) {\n      if( installPaths.hasOwnProperty(destination) ) {\n        // config goes in project root, rest in install folder\n        installPaths[destination] = (destination == 'config' || destination == 'configFolder')\n          ? path.normalize( path.join(manager.root, installPaths[destination]) )\n          : path.normalize( path.join(installFolder, installPaths[destination]) )\n        ;\n      }\n    }\n\n    // create project folders\n    try {\n      mkdirp.sync(installFolder);\n      mkdirp.sync(installPaths.definition);\n      mkdirp.sync(installPaths.theme);\n      mkdirp.sync(installPaths.tasks);\n    }\n    catch(error) {\n      console.error('NPM does not have permissions to create folders at your specified path. Adjust your folders permissions and run \"npm install\" again');\n    }\n\n    console.log('Installing to \\x1b[92m' + answers.semanticRoot + '\\x1b[0m');\n\n    console.info('Copying UI definitions');\n    wrench.copyDirSyncRecursive(source.definitions, installPaths.definition, settings.wrench.overwrite);\n\n    console.info('Copying UI themes');\n    wrench.copyDirSyncRecursive(source.themes, installPaths.theme, settings.wrench.merge);\n    wrench.copyDirSyncRecursive(source.defaultTheme, installPaths.defaultTheme, settings.wrench.overwrite);\n\n    console.info('Copying gulp tasks');\n    wrench.copyDirSyncRecursive(source.tasks, installPaths.tasks, settings.wrench.overwrite);\n\n    // copy theme import\n    console.info('Adding theme files');\n    gulp.src(source.themeImport)\n      .pipe(plumber())\n      .pipe(gulp.dest(installPaths.themeImport))\n    ;\n    gulp.src(source.lessImport)\n      .pipe(plumber())\n      .pipe(gulp.dest(installPaths.lessImport))\n    ;\n\n    // create gulp file\n    console.info('Creating gulpfile.js');\n    gulp.src(source.userGulpFile)\n      .pipe(plumber())\n      .pipe(gulp.dest(installFolder))\n    ;\n\n  }\n\n\n  /*--------------\n     Site Theme\n  ---------------*/\n\n  // Copy _site templates folder to destination\n  if( fs.existsSync(installPaths.site) ) {\n    console.info('Site folder exists, merging files (no overwrite)', installPaths.site);\n  }\n  else {\n    console.info('Creating site theme folder', installPaths.site);\n  }\n  wrench.copyDirSyncRecursive(source.site, installPaths.site, settings.wrench.merge);\n\n  /*--------------\n    Theme Config\n  ---------------*/\n\n  gulp.task('create theme.config', function() {\n    var\n      // determine path to site theme folder from theme config\n      // force CSS path variable to use forward slashes for paths\n      pathToSite   = path.relative(path.resolve(installPaths.themeConfigFolder), path.resolve(installPaths.site)).replace(/\\\\/g,'/'),\n      siteVariable = \"@siteFolder   : '\" + pathToSite + \"/';\"\n    ;\n\n    // rewrite site variable in theme.less\n    console.info('Adjusting @siteFolder to: ', pathToSite + '/');\n\n    if(fs.existsSync(installPaths.themeConfig)) {\n      console.info('Modifying src/theme.config (LESS config)', installPaths.themeConfig);\n      return gulp.src(installPaths.themeConfig)\n        .pipe(plumber())\n        .pipe(replace(regExp.siteVariable, siteVariable))\n        .pipe(gulp.dest(installPaths.themeConfigFolder))\n      ;\n    }\n    else {\n      console.info('Creating src/theme.config (LESS config)', installPaths.themeConfig);\n      return gulp.src(source.themeConfig)\n        .pipe(plumber())\n        .pipe(rename({ extname : '' }))\n        .pipe(replace(regExp.siteVariable, siteVariable))\n        .pipe(gulp.dest(installPaths.themeConfigFolder))\n      ;\n    }\n  });\n\n  /*--------------\n    Semantic.json\n  ---------------*/\n\n  gulp.task('create semantic.json', function() {\n\n    var\n      jsonConfig = install.createJSON(answers)\n    ;\n\n    // adjust variables in theme.less\n    if( fs.existsSync(files.config) ) {\n      console.info('Extending config file (semantic.json)', installPaths.config);\n      return gulp.src(installPaths.config)\n        .pipe(plumber())\n        .pipe(rename(settings.rename.json)) // preserve file extension\n        .pipe(jsonEditor(jsonConfig))\n        .pipe(gulp.dest(installPaths.configFolder))\n      ;\n    }\n    else {\n      console.info('Creating config file (semantic.json)', installPaths.config);\n      return gulp.src(source.config)\n        .pipe(plumber())\n        .pipe(rename({ extname : '' })) // remove .template from ext\n        .pipe(jsonEditor(jsonConfig))\n        .pipe(gulp.dest(installPaths.configFolder))\n      ;\n    }\n\n  });\n\n  runSequence(\n    'create theme.config',\n    'create semantic.json',\n    callback\n  );\n\n});\n\ngulp.task('clean up install', function() {\n\n  // Completion Message\n  if(installFolder) {\n    console.log('\\n Setup Complete! \\n Installing Peer Dependencies. \\x1b[0;31mPlease refrain from ctrl + c\\x1b[0m... \\n After completion navigate to \\x1b[92m' + answers.semanticRoot + '\\x1b[0m and run \"\\x1b[92mgulp build\\x1b[0m\" to build');\n    process.exit(0);\n  }\n  else {\n    console.log('');\n    console.log('');\n  }\n\n  return gulp\n    .src('gulpfile.js')\n    .pipe(prompt.prompt(questions.cleanup, function(answers) {\n      if(answers.cleanup == 'yes') {\n        del(install.setupFiles);\n      }\n      if(answers.build == 'yes') {\n        gulp.start('build');\n      }\n    }))\n  ;\n});\n\nrunSequence(\n  'run setup',\n  'create install files',\n  'clean up install',\n  callback\n);\n\n};"]}